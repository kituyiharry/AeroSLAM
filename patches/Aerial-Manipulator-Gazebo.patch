diff --git a/CMakeLists.txt b/CMakeLists.txt
index b0bf246..a8263f6 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -8,8 +8,6 @@ find_package(catkin REQUIRED COMPONENTS
   geometry_msgs
   std_msgs
   sensor_msgs
-  cmake_modules
-
 )
 
 find_package(gazebo REQUIRED)
@@ -30,7 +28,7 @@ add_library(gear_pub SHARED src/gear_joint_sensor.cpp)
 target_link_libraries(gear_pub ${catkin_LIBRARIES} ${GAZEBO_LIBRARIES})
 
 add_executable(kinova_tele src/robot_teleop_node.cpp)
-target_link_libraries(kinova_tele ${catkin_LIBRARIES} gazebo_math gazebo_common)
+target_link_libraries(kinova_tele ${catkin_LIBRARIES} ignition-math6 gazebo_common)
 
 add_executable(harrier_tele src/uav_teleop_node.cpp)
 target_link_libraries(harrier_tele ${catkin_LIBRARIES} )
diff --git a/launch/aerial_manipulator.launch b/launch/aerial_manipulator.launch
index 073a83f..279a8d6 100644
--- a/launch/aerial_manipulator.launch
+++ b/launch/aerial_manipulator.launch
@@ -1,3 +1,5 @@
+<?xml version="1.0"?>
+
 <launch>
   <arg name="mav_name" default="harrierD7"/>
   <arg name="kinova_robotType" default="j2s7s300"/>
@@ -23,6 +25,8 @@
     <arg name="paused" value="$(arg paused)" />
     <arg name="gui" value="$(arg gui)" />
     <arg name="verbose" value="$(arg verbose)"/>
+    <!--<arg name="lockstep" default="true" />-->
+    <arg name="extra_gazebo_args" value="--lockstep"/>
   </include>
   <rosparam file="$(find aerial_manipulation)/config/$(arg kinova_robotName)_control.yaml" command="load"/>
 
@@ -42,14 +46,213 @@
       <arg name="desired_y" value="0.0"/>
 	  <arg name="desired_z" value="2.1"/>
     </include>
+  <!-- Publish gazebo frames -->
+  <!--<node name="gazebo2rviz" pkg="gazebo2rviz" type="gazebo2tf_node.py"/>-->
 
   </group>
 
 
-  
- 
-    
-  
+  <!-- Mapping and localization -->
+  <arg name="pi/2" value="1.5707963267948966" />
+  <arg name="optical_rotate" value="0 0 0 -$(arg pi/2) 0 -$(arg pi/2)" />
+  <!--<node pkg="tf" type="static_transform_publisher" name="base_link" args="0 0 0.0 0 0 0 1 harrierD7/base_link base_link 100" />  -->
+  <node pkg="tf" type="static_transform_publisher" name="base_link" args="0 0 0.0 0 0 0 1 world base_link 100" />  
+  <node pkg="tf" type="static_transform_publisher" name="camera_base_link" args="$(arg optical_rotate) 1 base_link stereo_camera 100" />  
+  <!--<node pkg="tf" type="static_transform_publisher" name="st_base_link" args="0 0 0.0 0 0 0 1 harrierD7/base_link vi_sensor/camera_left_link 100" />  -->
+  <node pkg="tf" type="static_transform_publisher" name="harrierD7_odometry"  args="0 0 0 0 0 0 1 harrierD7/base_link harrierD7/odometry_sensor1/odometry 100" />  
+  <node pkg="tf" type="static_transform_publisher" name="harrierD7_vi_sensor_camera_left_link"  args="0 0 0 -1.00 0 0 1 harrierD7/base_link vi_sensor/camera_left_link 100" />  
+  <node pkg="tf" type="static_transform_publisher" name="harrierD7_vi_sensor_camera_right_link" args="0 0 0 -1.00 0 0 1 harrierD7/base_link vi_sensor/camera_right_link 100" />  
+
+  <arg name="camera" default="camera" />
+  <arg name="tf_prefix" default="$(optenv ROS_NAMESPACE)" />
+
+
+   <node pkg="tf" type="static_transform_publisher" name="$(arg camera)_base_link0"
+    args="0 -0.02  0 0 0 0 $(arg tf_prefix)/$(arg camera)_link $(arg tf_prefix)/$(arg camera)_depth_frame 100" />  
+  <node pkg="tf" type="static_transform_publisher" name="$(arg camera)_base_link1"
+    args="0 -0.045 0 0 0 0 $(arg tf_prefix)/$(arg camera)_link $(arg tf_prefix)/$(arg camera)_rgb_frame 100" />  
+  <node pkg="tf" type="static_transform_publisher" name="$(arg camera)_base_link2"
+    args="$(arg optical_rotate) $(arg tf_prefix)/$(arg camera)_depth_frame $(arg tf_prefix)/$(arg camera)_depth_optical_frame  100" />  
+  <node pkg="tf" type="static_transform_publisher" name="$(arg camera)_base_link3"
+    args="$(arg optical_rotate) $(arg tf_prefix)/$(arg camera)_rgb_frame $(arg tf_prefix)/$(arg camera)_rgb_optical_frame 100" />
+  <!-- https://stackoverflow.com/questions/46530509/ros-rtabmap-does-not-create-point-cloud-->
+  <!--<node pkg="tf" type="static_transform_publisher" name="camera_optical" args="0 0 0 -$(arg pi/2) 0 -$(arg pi/2) /camera_link /left 100" />-->
+
+
+  <!-- Run the ROS package stereo_image_proc -->
+  <group ns="stereo_camera" >
+    <node pkg="stereo_image_proc" type="stereo_image_proc" name="stereo_image_proc" args=" /stereo_camera/left/image_raw:=/harrierD7/vi_sensor/left/image_raw /stereo_camera/right/image_raw:=/harrierD7/vi_sensor/right/image_raw /stereo_camera/left/camera_info:=/harrierD7/vi_sensor/left/camera_info /stereo_camera/right/camera_info:=/harrierD7/vi_sensor/right/camera_info _approximate_sync:=true stereo:=stereo_camera image:=image_rect" >
+      <param name="_approximate_sync"    type="bool"   value="true"/>
+      <param name="/left/image_raw"      type="string" value="/harrierD7/vi_sensor/left/image_raw"/>
+      <param name="/right/image_raw"     type="string" value="/harrierD7/vi_sensor/right/image_raw"/>
+      <param name="/left/camera_info"    type="string" value="/harrierD7/vi_sensor/left/camera_info"/>
+      <param name="/right/camera_info"   type="string" value="/harrierD7/vi_sensor/right/camera_info"/>
+      <param name="stereo" type="string" value="stereo_camera"/>
+      <param name="image" type="string"  value="image_rect"/>
+    </node>
+
+    <!-- Disparity to depth -->
+    <node pkg="nodelet" type="nodelet" name="disparity2depth" args="standalone rtabmap_ros/disparity_to_depth"/>
+
+    <!-- Odometry -->
+    <node pkg="rtabmap_ros" type="stereo_odometry" name="stereo_odometry" output="screen">
+      <remap from="left/image_rect"       to="/harrierD7/vi_sensor/left/image_raw"/>
+      <remap from="right/image_rect"      to="/harrierD7/vi_sensor/right/image_raw"/>
+      <remap from="left/camera_info"      to="/harrierD7/vi_sensor/left/camera_info"/>
+      <remap from="right/camera_info"     to="/harrierD7/vi_sensor/right/camera_info"/>
+      <remap from="tf" to="/tf"/>
+
+      <param name="frame_id" type="string" value="/harrierD7/base_link"/>
+      <param name="odom_frame_id" type="string" value=""/>
+
+      <param name="approx_sync" type="bool" value="true"/>
+      <param name="stereo_approx_sync"      type="bool"   value="true"/>
+      <param name="queue_size" type="int" value="30"/>
+
+      <param name="Odom/InlierDistance" type="string" value="0.1"/>
+      <param name="Odom/MinInliers" type="string" value="10"/>
+      <param name="Odom/RoiRatios" type="string" value="0.03 0.03 0.04 0.04"/>
+      <param name="Odom/MaxDepth" type="string" value="10"/>
+
+      <param name="GFTT/MaxCorners" type="string" value="500"/>
+      <param name="GFTT/MinDistance" type="string" value="5"/>
+    </node>
+
+  </group>
+
+  <!-- Run
+
+    ROS_NAMESPACE=stereo rosrun stereo_image_proc stereo_image_proc /stereo/left/image_raw:=/harrierD7/vi_sensor/left/image_raw /stereo/right/image_raw:=/harrierD7/vi_sensor/right/image_raw /stereo/left/camera_info:=/harrierD7/vi_sensor/left/camera_info /stereo/right/camera_info:=/harrierD7/vi_sensor/right/camera_info _approximate_sync:=true stereo:=stereo image:=image_rect
+
+    check camera
+
+    rosrun image_view stereo_view stereo:=stereo image:=image_rect _approximate_sync:=True 
+
+
+    http://wiki.ros.org/stereo_image_proc
+    http://wiki.ros.org/rtabmap_ros#rtabmapviz
+
+  -->
+
+  <group ns="rtabmap">   
+    <node name="rtabmap" pkg="rtabmap_ros" type="rtabmap" output="screen" args="--udebug --uinfo ">
+      <param name="Mem/IncrementalMemory" type="string" value="true"/>
+      <param name="frame_id" type="string" value="/harrierD7/base_link"/>
+      <param name="subscribe_stereo" type="bool" value="true"/>
+      <param name="subscribe_rgbd"  type="bool" value="false"/>
+      <param name="subscribe_depth" type="bool" value="false"/>
+      <param name="subscribe_odom" type="bool"  value="true"/>
+      <param name="subscribe_odom_info" type="bool"  value="true"/>
+      <param name="approx_sync"      type="bool"   value="true"/>
+      <param name="stereo_approx_sync"      type="bool"   value="true"/>
+
+      <remap from="left/image_rect"   to="/stereo_camera/left/image_rect_color"/>
+      <remap from="right/image_rect"  to="/stereo_camera/right/image_rect_color"/>
+      <remap from="left/camera_info"  to="/harrierD7/vi_sensor/left/camera_info"/>
+      <remap from="right/camera_info" to="/harrierD7/vi_sensor/right/camera_info"/>
+
+      <remap from="odom_info" to="/stereo_camera/odom_info"/>
+      <remap from="odom" to="/stereo_camera/odom"/>
+      <!--<remap from="odom" to="/stereo_camera/stereo_odometry"/>-->
+      <remap from="tf" to="/tf"/>
+
+      <param name="queue_size" type="int" value="30"/>
+
+      <!--[> Minimum visual inliers to accept loop closure <]-->
+      <!--<param name="Vis/MinInliers" type="string" value="1"/>-->
+
+      <!--[> Set to false to avoid saving data when robot is not moving <]-->
+      <!--<param name="Mem/NotLinkedNodesKept" type="string" value="true"/>-->
+
+
+      <!--<param name="Odom/ResetCountdown" type="string" value="10"/>-->
+      <!--<param name="grid_size" type="double" value="50"/> [> 50 meters wide <]-->
+
+    </node>
+
+      <!--[> visualization with rtabmapviz <]-->
+      <!--<node pkg="rtabmap_ros" type="rtabmapviz" name="rtabmapviz" args="-d $(find rtabmap_ros)/launch/config/rgbd_gui.ini" output="screen">-->
+      <!--<param name="subscribe_stereo"             type="bool" value="true"/>-->
+      <!--<param name="subscribe_rgbd"             type="bool" value="true"/>-->
+      <!--<param name="subscribe_scan"              type="bool" value="false"/>-->
+      <!--<param name="frame_id"                    type="string" value="harrierD7/base_link"/>-->
+      <!--<param name="queue_size"                  type="int" value="10"/>-->
+      <!--<remap from="odom"                       to="harrierD7/odometry_sensor1/odometry"/>-->
+      <!--[><remap from="rgb/image"       to="$(arg rgb_topic)"/><]-->
+      <!--[><remap from="depth/image"     to="$(arg depth_topic)"/><]-->
+      <!--[><remap from="rgb/camera_info" to="$(arg camera_info_topic)"/><]-->
+      <!--[><remap from="scan"            to="/pepper_robot/laser"/><]-->
+      <!--</node>-->
+  </group>
+
+  <!-- Construct and voxelize the point cloud (for fast visualization in rviz) -->
+  <node pkg="nodelet" type="nodelet" name="points_xyzrgb" args="standalone rtabmap_ros/point_cloud_xyzrgb">
+    <remap from="rgbd_image"      to="/rtabmap/rgbd_image/compressed"/>
+    <remap from="cloud"           to="voxel_cloud" />
+
+    <param name="queue_size" type="int" value="30"/>
+    <param name="voxel_size" type="double" value="0.025"/>
+  </node>
+
+
+  <!-- Odometry: Run the viso2_ros package -->
+  <!--<node pkg="viso2_ros" type="stereo_odometer" name="stereo_odometer" output="screen">-->
+    <!--<remap from="stereo" to="stereo"/>-->
+    <!--<remap from="image"  to="image_rect"/>-->
+    <!--<param name="base_link_frame_id"      value="/harrierD7/base_link"/>-->
+    <!--<param name="odom_frame_id"           value="/harrierD7/odometry_sensor1/odometry"/>-->
+    <!--<param name="ref_frame_change_method" value="1"/>-->
+    <!--</node>-->
+
+
+    <!-- Run the ROS package stereo_image_proc -->
+    <!-- Odometry -->
+    <!--<node name="rtabmap" pkg="rtabmap_ros" type="rtabmap" args="- -uinfo - -udebug - -delete_db_on_start">-->
+      <!--[> LOCALIZATION MODE <]-->
+      <!--<param name="Mem/IncrementalMemory" type="string" value="true"/>-->
+      <!--<param name="approx_sync"   type="bool" value="true"/>-->
+
+      <!--<remap from="left/image_rect"       to="stereo/left/image_rect"/>-->
+      <!--<remap from="right/image_rect"      to="stereo/right/image_rect"/>-->
+      <!--<remap from="left/camera_info"      to="stereo/left/camera_info"/>-->
+      <!--<remap from="right/camera_info"     to="stereo/right/camera_info"/>-->
+
+      <!--<param name="map_frame_id"  type="string"  value="world"/>-->
+      <!--<param name="frame_id"      type="string"  value="harrierD7/base_link"/>-->
+      <!--<param name="odom_frame_id" type="string"  value="harrierD7/odometry_sensor1/odometry"/>-->
+
+      <!--<param name="approx_sync"   type="bool"   value="true"/>-->
+      <!--<param name="queue_size"    type="int"    value="5"/>-->
+
+      <!--<param name="Odom/MinInliers" type="string" value="12"/>-->
+      <!--<param name="Odom/RoiRatios"  type="string" value="0.03 0.03 0.04 0.04"/>-->
+
+      <!--</node>-->
+
+      <!--<group ns="rtabma p">   -->
+        <!--<node name="rtabmap" pkg="rtabmap_ros" type="rtabmap" output="screen" args="- -uinfo - -udebug - -delete_db_on_start">-->
+          <!--<node name="rtabmap" pkg="rtabmap_ros" type="rtabmap" output="screen" args="- -uinfo - -udebug - -delete_db_on_start">-->
+
+            <!--<param name="frame_id"         type="string" value="harrierD7/base_link"/>-->
+            <!--<param name="subscribe_stereo" type="bool"   value="true"/>-->
+            <!--<param name="subscribe_depth"  type="bool"   value="true"/>-->
+            <!--<param name="subscribe_laserScan" type="bool" value="false"/>-->
+            <!--<param name="approx_sync"      type="bool"   value="true"/>-->
+
+            <!--<remap from="left/image_rect"   to="left/image_rect_color"/>-->
+            <!--<remap from="right/image_rect"  to="right/image_rect"/>-->
+            <!--<remap from="left/camera_info"  to="left/camera_info"/>-->
+            <!--<remap from="right/camera_info" to="right/camera_info"/>-->
+
+            <!--[><remap from="odom" to="/harrierD7/odometry_sensor1/odometry"/><]-->
+            <!--<remap from="odom" to="/stereo_odometer/odometry"/>-->
+
+            <!--<param name="queue_size" type="int" value="30"/>-->
+
+            <!--[> RTAB-Map's parameters <]-->
+            <!--<param name="Vis/MinInliers" type="string" value="12"/>-->
 
+            <!--</node>-->
+            <!--</group>-->
 
-</launch>
+        </launch>
diff --git a/launch/robot_teleop.launch b/launch/robot_teleop.launch
index f60290d..4ee2ecc 100644
--- a/launch/robot_teleop.launch
+++ b/launch/robot_teleop.launch
@@ -1,3 +1,5 @@
+<?xml version="1.0"?>
+
 <launch>
 	<node name="kinova_harr_teleoper" output="screen" pkg="aerial_manipulation" type="kinova_tele" args="/harrierD7"/>
 	<!--
diff --git a/launch/spawn_mav.launch b/launch/spawn_mav.launch
index 4efaa90..5f6d974 100644
--- a/launch/spawn_mav.launch
+++ b/launch/spawn_mav.launch
@@ -12,13 +12,14 @@
   <arg name="enable_ground_truth" default="true"/>
   <arg name="log_file" default="$(arg mav_name)"/>
   <arg name="wait_to_record_bag" default="false"/>
-  <arg name="enable_mavlink_interface" default="false"/>
+  <arg name="enable_mavlink_interface" default="true"/>
   <arg name="load_manipulator" default="0" />
   <arg name="with_landing_gear" default="0" />
   <arg name="desired_x" default="0.0" />
   <arg name="desired_y" default="0.0" />
   <arg name="desired_z" default="0.0" />
   <arg name="kinova_robotType" default="j2s7s300"/>
+  <arg name="G_PI" default="3.1415926535897931" />
 
 
   <!-- send the robot XML to param server -->
@@ -59,4 +60,9 @@
          -J $(arg kinova_robotType)_joint_finger_3 1.0	"
    respawn="false" output="screen">
   </node>
+
+  <!--Depth sensor orientation in RVIZ is weird-->
+  <node pkg="tf" type="static_transform_publisher" name="harrierD7_broadcaster_opt_center" args="0.0 0.0 0.0 -1.00 0.0 0.0 1 harrierD7/base_link camera_depth_optical_center_link 100"/>
+  <node pkg="tf" type="static_transform_publisher" name="harrierD7_broadcaster_imu" args="0.0 0.0 0.0 -1.00 0.0 0.0 1 harrierD7/base_link harrierD7/imu_link 100"/>
+
 </launch>
diff --git a/package.xml b/package.xml
index e5d943a..63bdd5a 100644
--- a/package.xml
+++ b/package.xml
@@ -20,6 +20,10 @@
   <exec_depend>roscpp</exec_depend>
   <exec_depend>std_msgs</exec_depend>
 
+  <!--<run_depend>joint_state_publisher</run_depend>-->
+  <!--<run_depend>robot_state_publisher</run_depend>-->
+  <!--<run_depend>rviz</run_depend>-->
+
 
   <export>
   </export>
diff --git a/src/controller.cpp b/src/controller.cpp
index 51916fb..97c55a3 100644
--- a/src/controller.cpp
+++ b/src/controller.cpp
@@ -128,7 +128,7 @@ public:	void onUpdate()
 	{
 
 		physics::WorldPtr world = this->model->GetWorld();
-		time = world->GetSimTime().Double();
+		time = world->SimTime().Double();
 		if(time==0.001){
 			prev_time = 0;
 		}
@@ -150,7 +150,8 @@ public:	void onUpdate()
 			Eigen::VectorXd angd(7);
 			for(int i=1;i<8;i++){
 				physics::JointPtr joint_i = this->model->GetJoint(kinova_prefix + std::to_string(i));
-				double q = joint_i->GetAngle(0).Radian();
+				//double q = joint_i->GetAngle(0).Radian();
+				double q = joint_i->Position();
 				double qd = joint_i->GetVelocity(0);
 				angs(i-1) = q;
 				angd(i-1) = qd;
@@ -158,23 +159,26 @@ public:	void onUpdate()
 			Eigen::VectorXd fing(6);
 			for(int i=1;i<4;i++){
 				physics::JointPtr finger_i = this->model->GetJoint(finger_prefix + std::to_string(i));
-				double q = finger_i->GetAngle(0).Radian();
+				//double q = finger_i->GetAngle(0).Radian();
+				double q = finger_i->Position(0);
 				fing(i-1) = q;
 			}
 			for(int i=1;i<4;i++){
 				physics::JointPtr finger_i = this->model->GetJoint(tip_prefix + std::to_string(i));
-				double q = finger_i->GetAngle(0).Radian();
+				double q = finger_i->Position(0);
 				fing(i+2) = q;
 			}
 			foundpose.gripper = fing;
 			foundpose.robot_q = angs;
 			foundpose.robot_qdot = angd;
 		}		
-		gazebo::math::Pose pose = quad->GetWorldPose();  		
-		gazebo::math::Vector3 ang_vel = quad->GetRelativeAngularVel();	
-		gazebo::math::Vector3 lin_vel = quad->GetRelativeLinearVel();			
-		gazebo::math::Vector3 position = pose.pos;
-		gazebo::math::Quaternion quatern = pose.rot;
+		ignition::math::Pose3 pose = quad->WorldPose();  		
+		//ignition::math::Vector3 ang_vel = quad->GetRelativeAngularVel();	
+		ignition::math::Vector3 ang_vel = quad->RelativeAngularVel();	
+		//ignition::math::Vector3 lin_vel = quad->GetRelativeLinearVel();			
+		ignition::math::Vector3 lin_vel = quad->RelativeLinearVel();			
+		ignition::math::Vector3 position = pose.Pos();
+		ignition::math::Quaternion quatern = pose.Rot();
 
 		if(!system_armed){
 			if(my_abs(foundpose.robot_q(3)-q_desired(3))<1e-1){
@@ -184,9 +188,9 @@ public:	void onUpdate()
 			}
 		}		
 		
-		foundpose.position = Eigen::Vector3d(position.x , position.y , position.z);	
+		foundpose.position = Eigen::Vector3d(position.X() , position.Y() , position.Z());	
 
-		Eigen::Quaterniond quat1(quatern.w, quatern.x, quatern.y, quatern.z);
+		Eigen::Quaterniond quat1(quatern.W(), quatern.X(), quatern.Y(), quatern.Z());
 		if(quat1.norm() < std::numeric_limits<double>::epsilon()) {
 			quat1.setIdentity();
 		} else {
@@ -195,17 +199,19 @@ public:	void onUpdate()
 		foundpose.quatern = quat1;	
 
 		if ( my_norm(quatern) < std::numeric_limits<double>::epsilon()) {
-			quatern.SetToIdentity();
+			//quatern.SetToIdentity();
+			quatern = quatern.Identity;
 		} else {
 			quatern.Normalize();
 		}
-		gazebo::math::Vector3 rpy = quatern.GetAsEuler();	// we need both versions of the quaternion (Eigen::Quaterniond and gazebo::math::Quaternion) and we need them normalized
+		//ignition::math::Vector3 rpy = quatern.GetAsEuler();	// we need both versions of the quaternion (Eigen::Quaterniond and ignition::math::Quaternion) and we need them normalized
+		ignition::math::Vector3 rpy = quatern.Euler();	// we need both versions of the quaternion (Eigen::Quaterniond and ignition::math::Quaternion) and we need them normalized
 									// the reason is that the Eigen one is optimal for control later, the gazebo one is foolproof for transforming to RPY
-		foundpose.orientation << rpy.x , rpy.y , rpy.z ;	// found the RPY orientation
+		foundpose.orientation << rpy.X() , rpy.Y() , rpy.Z() ;	// found the RPY orientation
 
-		foundpose.velocity = Eigen::Vector3d(lin_vel.x, lin_vel.y, lin_vel.z);	// found the linear velocity
+		foundpose.velocity = Eigen::Vector3d(lin_vel.X(), lin_vel.Y(), lin_vel.Z());	// found the linear velocity
 
-		foundpose.angular_rate = Eigen::Vector3d(ang_vel.x, ang_vel.y, ang_vel.z);	// found the angular velocity
+		foundpose.angular_rate = Eigen::Vector3d(ang_vel.X(), ang_vel.Y(), ang_vel.Z());	// found the angular velocity
 
 		
 		Eigen::VectorXd torques(7);
@@ -234,9 +240,10 @@ public:	void onUpdate()
 		
 	}
 
-public: double my_norm( gazebo::math::Quaternion& quat )
+public: double my_norm( ignition::math::Quaternion<double>& quat )
 	{
-		double w = quat.w;	double x = quat.x;	double y = quat.y;	double z = quat.z;
+		//double w = quat.w;	double x = quat.x;	double y = quat.y;	double z = quat.z;
+		double w = quat.W();	double x = quat.X();	double y = quat.Y();	double z = quat.Z();
 		double norm = (w*w)+(x*x)+(y*y)+(z*z);
 		norm = sqrt(norm);
 		return norm;
diff --git a/src/gear_joint_sensor.cpp b/src/gear_joint_sensor.cpp
index 61b58e3..3c81b61 100644
--- a/src/gear_joint_sensor.cpp
+++ b/src/gear_joint_sensor.cpp
@@ -77,7 +77,9 @@ public:	void onUpdate()
 			joint_name = standard_prefix + std::to_string(i) + "_joint" ;
 			joint = this->model->GetJoint(joint_name);
 			double speed = joint->GetVelocity(0) ;
-			double angle = joint->GetAngle(0).Radian() ;
+      //double angle = joint->GetAngle(0).Radian() ;
+			double angle = joint->Position();
+      //double angle = joint->Position(0);
 			names.push_back(joint_name) ;
 			angles.push_back(angle) ;
 			velocities.push_back(speed) ; 
diff --git a/urdf/component_snippets.xacro b/urdf/component_snippets.xacro
index fd9f955..25367cc 100644
--- a/urdf/component_snippets.xacro
+++ b/urdf/component_snippets.xacro
@@ -105,7 +105,9 @@
           <cameraName>camera_${camera_suffix}</cameraName>
           <imageTopicName>image_raw</imageTopicName>
           <cameraInfoTopicName>camera_info</cameraInfoTopicName>
+          <frame_name>camera_${camera_suffix}_link</frame_name>
           <frameName>camera_${camera_suffix}_link</frameName>
+          <hack_baseline>0.0</hack_baseline>
           <hackBaseline>0.0</hackBaseline>
           <distortionK1>0.0</distortionK1>
           <distortionK2>0.0</distortionK2>
@@ -236,7 +238,9 @@
           <cameraName>${camera_name}</cameraName>
           <imageTopicName>image_raw</imageTopicName>
           <cameraInfoTopicName>camera_info</cameraInfoTopicName>
+          <frame_name>${camera_name}/camera_left_link</frame_name>
           <frameName>${camera_name}/camera_left_link</frameName>
+          <hack_baseline>${baseline_y}</hack_baseline>
           <hackBaseline>${baseline_y}</hackBaseline>
           <distortionK1>0.0</distortionK1>
           <distortionK2>0.0</distortionK2>
@@ -577,6 +581,7 @@
 
   <!-- VI sensor macros -->
   <!-- Macro to add a VI-sensor camera. -->
+      <!--image_format="L8"-->
   <xacro:macro name="vi_sensor_camera_macro"
     params="namespace parent_link camera_suffix frame_rate *origin">
     <xacro:camera_macro
@@ -587,7 +592,7 @@
       horizontal_fov="1.3962634"
       image_width="752"
       image_height="480"
-      image_format="L8"
+      image_format="RGB_INT8"
       min_distance="0.02"
       max_distance="30"
       noise_mean="0.0"
@@ -609,7 +614,7 @@
       horizontal_fov="1.3962634"
       image_width="752"
       image_height="480"
-      image_format="L8"
+      image_format="RGB_INT8"
       min_distance="0.02"
       max_distance="${max_range}"
       noise_mean="0.0"
@@ -679,6 +684,7 @@
           <depthImageTopicName>depth/disparity</depthImageTopicName>
           <depthImageCameraInfoTopicName>depth/camera_info</depthImageCameraInfoTopicName>
           <pointCloudTopicName>depth/points</pointCloudTopicName>
+          <frame_name>camera_${camera_suffix}_optical_center_link</frame_name>
           <frameName>camera_${camera_suffix}_optical_center_link</frameName>
           <pointCloudCutoff>0.5</pointCloudCutoff>
           <pointCloudCutoffMax>${max_range}</pointCloudCutoffMax>
diff --git a/urdf/harrierD7_base.xacro b/urdf/harrierD7_base.xacro
index 919526b..1f80d12 100644
--- a/urdf/harrierD7_base.xacro
+++ b/urdf/harrierD7_base.xacro
@@ -14,7 +14,7 @@
   </xacro:if>
 
   <!-- Mount an ADIS16448 IMU. -->
-  <xacro:default_imu namespace="${namespace}" parent_link="${namespace}/base_link" />
+  <!--<xacro:default_imu namespace="${namespace}" parent_link="${namespace}/base_link" />-->
 
   <xacro:if value="$(arg enable_ground_truth)">
     <xacro:ground_truth_imu_and_odometry namespace="${namespace}" parent_link="${namespace}/base_link" />
@@ -29,5 +29,17 @@
       wait_to_record_bag="$(arg wait_to_record_bag)" />
   </xacro:if>
 
+  <xacro:property name="M_PI" value="3.1415926535897931" />
+  <xacro:vi_sensor_macro
+    enable_cameras="true" 
+    enable_depth="true" 
+    enable_ground_truth="true"
+    namespace="${namespace}" parent_link="${namespace}/base_link">
+    <!--[>Look for insert block<]-->
+    <!--yaw 90 deg-->
+  <origin xyz="0.0 0.125 0.300" rpy="0.0 0.0 ${M_PI/2}" />
+
+  </xacro:vi_sensor_macro>
+
 </robot>
 
